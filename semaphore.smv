MODULE user(semaphore, active)
VAR
  state : { idle, entering, critical, exiting };


MODULE main
VAR
  semaphore : boolean;
  running : 0..1;
  proc1 : user(semaphore, next(running) = 0);
  proc2 : user(semaphore, next(running) = 1);
ASSIGN
  init(semaphore) := FALSE;
  init(proc1.state) := idle;
  init(proc2.state) := idle;

  next(proc1.state) := case
    !(proc1.active) : proc1.state; -- state transitions only fire when active
    proc1.state = idle : { idle, entering };
    --proc1.state = entering & semaphore : idle;
    proc1.state = entering & !semaphore : critical;
    proc1.state = critical : { critical, exiting };
    proc1.state = exiting : idle;
    TRUE : proc1.state;
  esac;

  next(proc2.state) := case
    !(proc2.active) : proc2.state; -- state transitions only fire when active
    proc2.state = idle : { idle, entering };
    --proc2.state = entering & semaphore : idle;
    proc2.state = entering & !semaphore : critical;
    proc2.state = critical : { critical, exiting };
    proc2.state = exiting : idle;
    TRUE : proc2.state;
  esac;

  next(semaphore) := case
    proc1.state = entering | proc1.state = critical: TRUE;
    proc2.state = entering | proc2.state = critical: TRUE;
    proc1.state = exiting : FALSE;
    proc2.state = exiting : FALSE;
    TRUE : semaphore;
  esac;

SPEC AG !(proc1.state = critical & proc2.state = critical); -- safety

SPEC AG (proc1.state = entering -> AF proc1.state = critical); -- liveness
