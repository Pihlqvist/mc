MODULE main
VAR
  location : array 0..3 of boolean; -- A,B,C,D
  traveling: array 0..3 of boolean; -- On the move
  torch: boolean; -- False = left, True = right
  time: 0..100;

ASSIGN
  init (location[0]) := FALSE; -- Set default location to left
  init (location[1]) := FALSE; -- Set default location to left
  init (location[2]) := FALSE; -- Set default location to left
  init (location[3]) := FALSE; -- Set default location to left
  init (torch) := FALSE;  -- Set default location to left
  init (time) := 0;

  next (torch) := case
    -- rule: torch can only move if carried
    traveling[0] | traveling[1] | traveling[2] | traveling[3] : !torch;
    TRUE: torch;
  esac;

  next (location[0]) := case
    -- rule: location changes if "0" is traveling
    traveling[0] & torch = location[0]: !location[0];
    TRUE: location[0];
  esac;

  next (location[1]) := case
    -- rule: location changes if "1" is traveling
    traveling[1] & torch = location[1]: !location[1];
    TRUE: location[1];
  esac;

  next (location[2]) := case
  -- rule: location changes if "2" is traveling
    traveling[2] & torch = location[2]: !location[2];
    TRUE: location[2];
  esac;

  next (location[3]) := case
  -- rule: location changes if "3" is traveling
    traveling[3] & torch = location[3]: !location[3];
    TRUE: location[3];
  esac;

  -- Update time
  next(time) := case
    time > 90: 90;
    traveling[3]: time + 10; -- Person 3 takes 10 minutes cross
    traveling[2]: time + 5; -- Person 2 takes 5 minutes cross
    traveling[1]: time + 2; -- Person 1 takes 2 minutes cross
    traveling[0]: time + 1; -- Person 0 takes 1 minutes cross
    TRUE: time;
  esac;

TRANS
  -- Can only move with the torch
  (traveling[0] -> location[0] = torch) &
  (traveling[1] -> location[1] = torch) &
  (traveling[2] -> location[2] = torch) &
  (traveling[3] -> location[3] = torch);

LTLSPEC
  -- No more than 2 people can move at the same time
  -- Reach goal under time limit
  !( (!(count(traveling[0], traveling[1], traveling[2], traveling[3]) > 2) )
     U (location[0] & location[1] & location[2] & location[3] &
        time <= 17
        ));
/--
-- specification !(!(count(traveling[0], traveling[1], traveling[2], traveling[3]) > 2) U ((((location[0] & location[1]) & location[2]) & location[3]) & time <= 17))  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample
Trace Type: Counterexample
  -> State: 1.1 <-
    location[0] = FALSE
    location[1] = FALSE
    location[2] = FALSE
    location[3] = FALSE
    traveling[0] = TRUE
    traveling[1] = TRUE
    traveling[2] = FALSE
    traveling[3] = FALSE
    torch = FALSE
    time = 0
  -> State: 1.2 <-
    location[0] = TRUE
    location[1] = TRUE
    traveling[0] = FALSE
    torch = TRUE
    time = 2
  -> State: 1.3 <-
    location[1] = FALSE
    traveling[1] = FALSE
    traveling[2] = TRUE
    traveling[3] = TRUE
    torch = FALSE
    time = 4
  -> State: 1.4 <-
    location[2] = TRUE
    location[3] = TRUE
    traveling[0] = TRUE
    traveling[2] = FALSE
    traveling[3] = FALSE
    torch = TRUE
    time = 14
  -> State: 1.5 <-
    location[0] = FALSE
    traveling[1] = TRUE
    torch = FALSE
    time = 15
  -> State: 1.6 <-
    location[0] = TRUE
    location[1] = TRUE
    traveling[1] = FALSE
    torch = TRUE
    time = 17
  -- Loop starts here
  -> State: 1.7 <-
    location[0] = FALSE
    traveling[0] = FALSE
    torch = FALSE
    time = 18
  -> State: 1.8 <-
--/


/--
  This was the optimum transiton with respect to time.

  LEFT    RIGHT   TIME

  0123    ----    t:0
  --23    01--    t:2
  -123    0---    t:4
  -1--    0-23    t:14
  01--    --23    t:15
  ----    1234    t:17
--/
